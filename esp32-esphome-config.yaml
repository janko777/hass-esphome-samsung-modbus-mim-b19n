esphome:
  name: tepelnecerpadlo2
  friendly_name: tepelnecerpadlo2
  on_boot:
    ## configure controller settings at setup
    ## make sure priority is lower than setup_priority of modbus_controller
    priority: -100
    then:
      - lambda: |-
          ESP_LOGE("ModbusLambda", "Test");
          // get local time and sync to controller
          esphome::modbus_controller::ModbusController *controller = id(tc_modbus);

          // Indoor settings
          std::vector<uint16_t> indoor_settings1 = {
              0x42E9,       // Watter flow
              0x42F1,  // Compressor freq ratio  (FR control)
              0x8238,
              0x4067,  // 3way valve position (DHW/space heating)
              //0x8204   // 
          };
          //7005,[0x42E9, 0x42F1, 0x4067, 0x8204])
          //[0x8238, 0x8204, ]
          esphome::modbus_controller::ModbusCommandItem set_indoor_command =
              esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 7005, indoor_settings1.size() ,
                                                                                          indoor_settings1);

          delay(200) ;
          controller->queue_command(set_indoor_command);


          // Outdoor settings
          std::vector<uint16_t> outdoor_settings1 = {
              0x8238,  // Runnign compressor frequecy - current freq in Hz
              0x8204,   // Outdoor temp
              0x42E9
          };
          esphome::modbus_controller::ModbusCommandItem set_outdoor_command =
              esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 6005, outdoor_settings1.size() ,
                                                                                          outdoor_settings1);

          delay(200) ;
          controller->queue_command(set_outdoor_command);



          ESP_LOGI("ModbusLambda", "EPSOLAR Battery set");



esp32:
  board: esp32doit-devkit-v1
#  framework:
#    type: arduino
#    version: 2.0.6
  framework:
    type: esp-idf
# Enable logging
logger:
   baud_rate: 0




# Enable Home Assistant API
api:
  encryption:
    key: "********** REPLACE *******************"

ota:
  password: "********** REPLACE *******************"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Tepelnecerpadlo2"
    password: "QeAtenSWSBGI"

captive_portal:
uart:
  id: mod_bus
  tx_pin: GPIO17
  rx_pin: GPIO16
#  tx_pin: GPIO1
#  rx_pin: GPIO3
#  tx_pin: 17
#  rx_pin: 16
  baud_rate: 9600
  stop_bits: 1
  parity: EVEN
  
#  debug:
#    direction: BOTH
#    dummy_receiver: false
#    after:
#      delimiter: "\n"
#    sequence:
#      - lambda: UARTDebug::log_string(direction, bytes);
      
modbus:
#  flow_control_pin: GPIO5
  id: modbus1
  
#  disable_crc: true
#  send_wait_time: 500ms
  

modbus_controller:
- id: tc_modbus
    ## the Modbus device addr
  address: 0x02
  modbus_id: modbus1
  setup_priority: -10
  command_throttle: 500ms
  update_interval: 30s



number:  
  - platform: modbus_controller
    modbus_controller_id: tc_modbus
    name: "Hot water set temperature"
    id: tc_hot_water_set_temp
    register_type: holding #function code 3
#    address: 0x004A
    address: 74
    unit_of_measurement: "C"
#    value_type: U_WORD
    ## reimplement using custom_command
    # 0x2 : modbus device address
    # 0x4 : modbus function code
    # 0x1 : high byte of modbus register address
    # 0x56: low byte of modbus register address
    # 0x00: high byte of total number of registers requested
    # 0x02: low byte of total number of registers requested
#    custom_command: [ 0x2, 0x3, 0x0, 0x1 , 0x0, 0x02]
    value_type: U_WORD
    min_value: 40
    max_value: 50
    multiply: 10
    step: 1
#    lambda: "return  x * 0.1; "
#    accuracy_decimals: 1
     
#    filters:
#      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: tc_modbus
    name: "Set temperature"
    id: tc_set_temp
    register_type: holding #function code 3
    #address: 0x004B
    address: 58
    unit_of_measurement: "C"
    value_type: U_WORD
    step: 0.5
    min_value: 18
    max_value: 28
    multiply: 10
#    accuracy_decimals: 1
#    filters:
#      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: tc_modbus
    name: "Watter out set temperature"
    id: tc_watter_out_set_temp
    register_type: holding #function code 3
    address: 68
    unit_of_measurement: "C"
    value_type: U_WORD
    step: 0.1
    min_value: 18
    max_value: 50
    multiply: 10
#    accuracy_decimals: 1
#    filters:
#      - multiply: 0.1


  - platform: modbus_controller
    modbus_controller_id: tc_modbus
    name: "Hot watter mode"
    id: tc_hot_watter_mode
    register_type: holding #function code 3
    address: 73
#    unit_of_measurement: "C"
    value_type: U_WORD

#    step: 0.1
#    min_value: 18
#    max_value: 26
#    multiply: 10
#    accuracy_decimals: 1
#    filters:
#      - multiply: 0.1


sensor:

  - platform: modbus_controller
    modbus_controller_id: tc_modbus
    name: "TC FR control"
    id: tc_fr_control
    register_type: holding #function code 3
    address: 88
#    address: 75
    unit_of_measurement: "%"
    value_type: U_WORD
    


  - platform: modbus_controller
    modbus_controller_id: tc_modbus
    name: "TC outdoor temp"
    id: tc_outdoor_temp
    register_type: holding #function code 3
    address: 5
#    address: 75
    unit_of_measurement: "C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1


  - platform: modbus_controller
    modbus_controller_id: tc_modbus
    name: "Compressor freq ratio"
    id: tc_compressor_freq_ratio
    register_type: holding #function code 3
    address: 4
#    address: 75
    unit_of_measurement: "freq"
    value_type: U_WORD
#    accuracy_decimals: 1
#    filters:
#      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: tc_modbus
    name: "TC watter_flow"
    id: tc_watter_flow
    register_type: holding #function code 3
    address: 87
#    address: 75
    unit_of_measurement: "L"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    

  - platform: modbus_controller
    modbus_controller_id: tc_modbus
    name: "Hot water temperature"
    id: tc_hot_water_temp
    register_type: holding #function code 3
    address: 0x004B
#    address: 75
    unit_of_measurement: "C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1


  - platform: modbus_controller
    modbus_controller_id: tc_modbus
    name: "Room temperature"
    id: tc_room_temp
    register_type: holding #function code 3
    #address: 0x004B
    address: 59
    unit_of_measurement: "C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: tc_modbus
    name: "Watter out temperature"
    id: tc_watter_out_temperature
    register_type: holding #function code 3
    #address: 0x004B
    address: 66
    unit_of_measurement: "C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: tc_modbus
    name: "Watter in temperature"
    id: tc_watter_in_temperature
    register_type: holding #function code 3
    #address: 0x004B
    address: 65
    unit_of_measurement: "C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: tc_modbus
    name: "Air conditioner on/off"
    id: tc_ac_on_off
    register_type: holding #function code 3
    #address: 0x004B
    address: 52
#    unit_of_measurement: "C"
    value_type: U_WORD
#    accuracy_decimals: 1
#    filters:
#      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: tc_modbus
    name: "Air conditioner mode"
    id: tc_ac_mode
    register_type: holding #function code 3
    #address: 0x004B
    address: 53
#    unit_of_measurement: "C"
    value_type: U_WORD
#    accuracy_decimals: 1
#    filters:
#      - multiply: 0.1


#  - platform: modbus_controller
#    modbus_controller_id: tc_modbus
#    name: "error status"
#    id: tc_error_status
#    register_type: holding
#    address: 0x0001
#    value_type: U_WORD
